# Puerto
quarkus.http.port=8081

# OIDC (Keycloak)
#%prodquarkus.oidc.auth-server-url=${OIDC_ISSUER:http://keycloak:8080/realms/cinema}
%dev.quarkus.oidc.auth-server-url=http://localhost:8080/realms/cinema
quarkus.oidc.client-id=${OIDC_CLIENT_ID:quarkus-api}
quarkus.oidc.application-type=service

# Roles: lee client roles de quarkus-api (tu JWT ya los trae)
quarkus.oidc.roles.source=accesstoken
quarkus.oidc.roles.role-claim-path=resource_access/quarkus-api/roles

# Seguridad por rutas
quarkus.http.auth.permission.public.paths=/health,/q/*
quarkus.http.auth.permission.public.policy=permit
quarkus.http.auth.permission.protected.paths=/api/*
quarkus.http.auth.permission.protected.policy=authenticated

# Logs Ãºtiles mientras pruebas
quarkus.log.category."io.quarkus.oidc".level=DEBUG
quarkus.log.category."io.quarkus.security".level=DEBUG
quarkus.log.category."io.quarkus.vertx.http.runtime.security".level=DEBUG

# Admin client para llamar al Admin API de Keycloak
keycloak.admin.url=${ADMIN_URL:http://localhost:8080}
keycloak.admin.realm=${REALM:cinema}
keycloak.admin.client-id=${CLIENT_ID:kc-admin}
keycloak.admin.client-secret=${CLIENT_SECRET}

quarkus.oidc.token.audience=quarkus-api
quarkus.oidc.authentication.user-info-required=false

#CORS para el frontend
quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:5173
quarkus.http.cors.methods=GET,POST,PUT,PATCH,DELETE,OPTIONS
quarkus.http.cors.headers=Authorization,Content-Type